import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

class Room {
    private int roomNumber;
    private String category; 
    private boolean isAvailable;

    public Room(int roomNumber, String category) {
        this.roomNumber = roomNumber;
        this.category = category;
        this.isAvailable = true;
    }

    public int getRoomNumber() {
        return roomNumber;
    }

    public String getCategory() {
        return category;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean isAvailable) {
        this.isAvailable = isAvailable;
    }
}


class Reservation {
    private Room room;
    private String guestName;
    private Date checkInDate;
    private Date checkOutDate;

    public Reservation(Room room, String guestName, Date checkInDate, Date checkOutDate) {
        this.room = room;
        this.guestName = guestName;
        this.checkInDate = checkInDate;
        this.checkOutDate = checkOutDate;
    }

    public Room getRoom() {
        return room;
    }

    public String getGuestName() {
        return guestName;
    }

    public Date getCheckInDate() {
        return checkInDate;
    }

    public Date getCheckOutDate() {
        return checkOutDate;
    }
}


class Hotel {
    private List<Room> rooms;
    private List<Reservation> reservations;

    public Hotel() {
        rooms = new ArrayList<>();
        reservations = new ArrayList<>();
        
        for (int i = 1; i <= 30; i++) {
            rooms.add(new Room(i, "Single"));
        }
        for (int i = 31; i <= 70; i++) {
            rooms.add(new Room(i, "Double"));
        }
        for (int i = 71; i <= 100; i++) {
            rooms.add(new Room(i, "Suite"));
        }
    }

    public List<Room> searchAvailableRooms(String category) {
        List<Room> availableRooms = new ArrayList<>();
        for (Room room : rooms) {
            if (room.getCategory().equals(category) && room.isAvailable()) {
                availableRooms.add(room);
            }
        }
        return availableRooms;
    }

    public boolean makeReservation(int roomNumber, String guestName, Date checkIn, Date checkOut) {
        for (Room room : rooms) {
            if (room.getRoomNumber() == roomNumber && room.isAvailable()) {
                room.setAvailable(false);
                reservations.add(new Reservation(room, guestName, checkIn, checkOut));
                return true;
            }
        }
        return false;
    }

    public List<Reservation> getReservations() {
        return reservations;
    }
}


class Payment {
    private double amount;
    private String paymentMethod; 
    public Payment(double amount, String paymentMethod) {
        this.amount = amount;
        this.paymentMethod = paymentMethod;
    }

    public double getAmount() {
        return amount;
    }

    public String getPaymentMethod() {
        return paymentMethod;
    }

    public void processPayment() {
      
        System.out.println("Processing payment of $" + amount + " using " + paymentMethod);
    }
}

class UserInterface {
    private Hotel hotel;

    public UserInterface(Hotel hotel) {
        this.hotel = hotel;
    }

    public void start() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("1. Search for available rooms");
            System.out.println("2. Make a reservation");
            System.out.println("3. View reservations");
            System.out.println("4. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine(); 

            switch (choice) {
                case 1:
                    System.out.print("Enter room category (Single, Double, Suite): ");
                    String category = scanner.nextLine();
                    List<Room> availableRooms = hotel.searchAvailableRooms(category);
                    if (availableRooms.isEmpty()) {
                        System.out.println("No available rooms in this category.");
                    } else {
                        for (Room room : availableRooms) {
                            System.out.println("Room Number: " + room.getRoomNumber());
                        }
                    }
                    break;
                case 2:
                    System.out.print("Enter room number: ");
                    int roomNumber = scanner.nextInt();
                    scanner.nextLine(); 
                    System.out.print("Enter guest name: ");
                    String guestName = scanner.nextLine();
                    
                    Date checkInDate = new Date();
                    Date checkOutDate = new Date();
                    boolean success = hotel.makeReservation(roomNumber, guestName, checkInDate, checkOutDate);
                    if (success) {
                        System.out.println("Reservation successful.");
                        System.out.print("Enter payment amount: ");
                        double amount = scanner.nextDouble();
                        scanner.nextLine(); 
                        System.out.print("Enter payment method (Credit Card, Debit Card, Cash): ");
                        String paymentMethod = scanner.nextLine();
                        Payment payment = new Payment(amount, paymentMethod);
                        payment.processPayment();
                    } else {
                        System.out.println("Reservation failed.");
                    }
                    break;
                case 3:
                    List<Reservation> reservations = hotel.getReservations();
                    if (reservations.isEmpty()) {
                        System.out.println("No reservations found.");
                    } else {
                        for (Reservation reservation : reservations) {
                            System.out.println("Room Number: " + reservation.getRoom().getRoomNumber() + 
                                               ", Guest Name: " + reservation.getGuestName() + 
                                               ", Check-in Date: " + reservation.getCheckInDate() + 
                                               ", Check-out Date: " + reservation.getCheckOutDate());
                        }
                    }
                    break;
                case 4:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}


public class Main {
    public static void main(String[] args) {
        Hotel hotel = new Hotel();
        UserInterface ui = new UserInterface(hotel);
        ui.start();
    }
}
